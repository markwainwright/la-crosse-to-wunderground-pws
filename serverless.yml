service: la-crosse-to-wunderground

plugins:
  - serverless-plugin-typescript
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs14.x
  region: us-west-2
  stage: production
  timeout: 20
  memorySize: 1024
  versionFunctions: false

functions:
  reader:
    handler: src/reader.handler
    environment:
      LA_CROSSE_DEVICE_ID: ${env:LA_CROSSE_DEVICE_ID}
      S3_BUCKET_NAME: !Ref ObservationsBucket
      THERMO_HYGRO_ENABLED: 1
      PRESSURE_ENABLED: 1
      RAIN_ENABLED: 0
      WIND_ENABLED: 1
      INDOOR_THERMO_HYGRO_ENABLED: 1
    description: Fetches weather observations from La Crosse Alerts Mobile and writes them to S3
    events:
      - schedule:
          rate: rate(15 minutes) # La Crosse usually publishes a new observation every 7-17 mins
          input:
            count: 3
    iamRoleStatements:
      - Effect: Allow
        Action: s3:ListBucket
        Resource: !GetAtt ObservationsBucket.Arn
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource: !Sub '${ObservationsBucket.Arn}/*'

  writer:
    handler: src/writer.handler
    environment:
      WUNDERGROUND_ID: ${env:WUNDERGROUND_ID}
      WUNDERGROUND_PWD: ${env:WUNDERGROUND_PWD}
    description: Subscribes to queue of S3 writes, fetches observation from S3, and submits it Weather Underground PWS
    events:
      - sqs:
          arn: !GetAtt Queue.Arn
          batchSize: 1
    iamRoleStatements:
      - Effect: Allow
        Action: s3:ListBucket
        Resource: !GetAtt ObservationsBucket.Arn
      - Effect: Allow
        Action: s3:GetObject
        Resource: !Sub '${ObservationsBucket.Arn}/*'

resources:
  Resources:
    ObservationsBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - QueuePolicy
      Properties:
        BucketName: !Sub '${AWS::StackName}-observations'
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        NotificationConfiguration:
          QueueConfigurations:
            - Event: s3:ObjectCreated:Put
              Queue: !GetAtt Queue.Arn

    Queue:
      Type: AWS::SQS::Queue
      Properties:
        VisibilityTimeout: 300 # How long to wait before retrying writer lambda invocation failures

    QueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref Queue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sqs:SendMessage
              Resource: !GetAtt Queue.Arn
              Principal:
                AWS: '*'
              Condition:
                ArnLike:
                  aws:SourceArn: !Sub 'arn:aws:s3:*:*:${AWS::StackName}-observations'
                StringEquals:
                  aws:SourceAccount: !Ref AWS::AccountId

    AlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint: $${env:ALARM_EMAIL}
            Protocol: email

    ReaderErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        Namespace: AWS/Lambda
        AlarmDescription: Reader errors has hit threshold
        Dimensions:
          - Name: FunctionName
            Value: !Ref ReaderLambdaFunction
        MetricName: Errors
        ComparisonOperator: GreaterThanThreshold
        Statistic: Sum
        Unit: Count
        Threshold: 3
        Period: 1200 # 20 mins
        EvaluationPeriods: 2
        AlarmActions:
          - !Ref AlarmTopic
        OKActions:
          - !Ref AlarmTopic

    WriterErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        Namespace: AWS/Lambda
        AlarmDescription: Reader errors has hit threshold
        Dimensions:
          - Name: FunctionName
            Value: !Ref WriterLambdaFunction
        MetricName: Errors
        ComparisonOperator: GreaterThanThreshold
        Statistic: Sum
        Unit: Count
        Threshold: 3
        Period: 1200 # 20 mins
        EvaluationPeriods: 2
        AlarmActions:
          - !Ref AlarmTopic
        OKActions:
          - !Ref AlarmTopic

    QueueMessagesAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        Namespace: AWS/SQS
        AlarmDescription: Visible messages has hit threshold
        Dimensions:
          - Name: QueueName
            Value: !GetAtt Queue.QueueName
        MetricName: ApproximateNumberOfMessagesVisible
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Statistic: Sum
        Unit: Count
        Threshold: 5
        Period: 300
        EvaluationPeriods: 1
        AlarmActions:
          - !Ref AlarmTopic
        OKActions:
          - !Ref AlarmTopic

    CDUser:
      Type: AWS::IAM::User
      Properties:
        UserName: ${self:service}
        Path: '/cd/'
        Policies:
          - PolicyName: Deploy
            PolicyDocument:
              Statement:
                # These permissions allow the stack and lambda function code to be updated by GitHub
                # Actions. They do not allow changes to the topic, queue, or alarms currently â€“
                # deploys requiring changes to them will need to be done by a more privileged user.

                - Effect: Allow
                  Action:
                    - cloudformation:Describe*
                    - cloudformation:List*
                    - cloudformation:Get*
                    - cloudformation:PreviewStackUpdate
                    - cloudformation:ValidateTemplate
                  Resource: '*'

                - Effect: Allow
                  Action:
                    - cloudformation:CreateStack
                    - cloudformation:UpdateStack
                    - cloudformation:DeleteStack
                  Resource:
                    - arn:aws:cloudformation:#{AWS::Region}:#{AWS::AccountId}:stack/#{AWS::StackName}/*

                - Effect: Allow
                  Action: s3:*
                  Resource:
                    - !GetAtt ServerlessDeploymentBucket.Arn
                    - !Sub '${ServerlessDeploymentBucket.Arn}/*'

                - Effect: Allow
                  Action: lambda:*
                  Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:#{AWS::StackName}*

                - Effect: Allow
                  Action:
                    - iam:GetRole
                    - iam:PassRole
                    - iam:DeleteRolePolicy
                    - iam:CreateRole
                    - iam:DeleteRole
                    - iam:AttachRolePolicy
                    - iam:DetachRolePolicy
                    - iam:PutRolePolicy
                  Resource:
                    - !GetAtt ReaderIamRoleLambdaExecution.Arn
                    - !GetAtt WriterIamRoleLambdaExecution.Arn

    CDUserAccessKey:
      Type: AWS::IAM::AccessKey
      Properties:
        UserName: !Ref CDUser

    CDUserAccessKeyParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: '/cd/${self:service}/accessKey'
        Tier: Standard
        Type: String
        Value: !Ref CDUserAccessKey

    CDUserSecretAccessKeyParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: '/cd/${self:service}/secretAccessKey'
        Tier: Standard
        Type: String
        Value: !GetAtt CDUserAccessKey.SecretAccessKey
