{
  "Parameters": {
    "StackName": {
      "Type": "String"
    },

    "CodeS3Bucket": {
      "Type": "String"
    },

    "LaCrosseDeviceId": {
      "Type": "String"
    },

    "WundergroundId": {
      "Type": "String"
    },

    "WundergroundPassword": {
      "Type": "String"
    },

    "CodeObjectKey": {
      "Type": "String"
    }
  },

  "Resources": {
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {"Fn::Sub": "${StackName}-role"},
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {"Fn::Sub": "${StackName}-log-policy"},
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["logs:*"],
                  "Resource": ["arn:aws:logs:*:*:*"]
                }
              ]
            }
          }
        ]
      }
    },

    "Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {"Fn::Sub": "${StackName}-function"},
        "Code": {
          "S3Bucket": {"Ref": "CodeS3Bucket"},
          "S3Key": {"Ref": "CodeObjectKey"}
        },
        "Description": "Fetch weather observations from La Crosse Alerts Mobile and submit them to Weather Underground PWS",
        "Handler": "lambda.handler",
        "MemorySize": 128,
        "Role": {"Fn::GetAtt": ["Role", "Arn"]},
        "Runtime": "nodejs6.10",
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "LA_CROSSE_DEVICE_ID": {"Ref": "LaCrosseDeviceId"},
            "WUNDERGROUND_ID": {"Ref": "WundergroundId"},
            "WUNDERGROUND_PWD": {"Ref": "WundergroundPassword"}
          }
        }
      }
    },

    "ScheduleRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": {"Fn::Sub": "Schedule rule for '${StackName}-function'"},
        "Name": {"Fn::Sub": "${StackName}-schedule"},
        "ScheduleExpression": "rate(10 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["Function", "Arn"]},
            "Id": {"Fn::Sub": "${StackName}-trigger"}
          }
        ]
      }
    },

    "TriggerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["Function", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["ScheduleRule", "Arn"]}
      }
    }
  }
}
