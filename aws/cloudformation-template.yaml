Parameters:
  AlarmEmail:
    Type: String
  CodeS3Bucket:
    Type: String
  CodeS3Key:
    Type: String
  LaCrosseDeviceId:
    Type: String
  WundergroundId:
    Type: String
  WundergroundPassword:
    Type: String

Resources:
  ReaderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-reader-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-cloudwatch-logs-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: !Sub ${AWS::StackName}-sns-publish-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref Topic

  ReaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-reader
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Description: Fetch weather observations from La Crosse Alerts Mobile and send them to an SNS topic
      Handler: reader.handler
      MemorySize: 128
      Role: !GetAtt ReaderRole.Arn
      Runtime: nodejs8.10
      Timeout: 5
      Environment:
        Variables:
          LA_CROSSE_DEVICE_ID: !Ref LaCrosseDeviceId
          TOPIC_ARN: !Ref Topic

  WriterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-writer-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-log-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: !Sub ${AWS::StackName}-queue-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                 - sqs:DeleteMessage
                 - sqs:ChangeMessageVisibility
                 - sqs:ReceiveMessage
                 - sqs:GetQueueAttributes
                Resource: !GetAtt Queue.Arn

  WriterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-writer
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Description: Receive weather observations from an SQS queue and submit them to Weather Underground PWS
      Handler: writer.handler
      MemorySize: 128
      Role: !GetAtt WriterRole.Arn
      Runtime: nodejs8.10
      Timeout: 5
      Environment:
        Variables:
          WUNDERGROUND_ID: !Ref WundergroundId
          WUNDERGROUND_PWD: !Ref WundergroundPassword

  ReaderSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub Schedule rule for ${ReaderFunction}
      Name: !Sub ${AWS::StackName}-schedule
      ScheduleExpression: rate(15 minutes) # La Crosse publishes a new observation every ~16 mins
      State: ENABLED
      Targets:
        - Arn: !GetAtt ReaderFunction.Arn
          Id: !Sub ${AWS::StackName}-trigger

  ReaderSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ReaderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ReaderSchedule.Arn

  Topic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-topic
      Subscription:
        - Endpoint: !GetAtt Queue.Arn
          Protocol: sqs

  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-queue
      VisibilityTimeout: 300 # How long to wait before retrying writer lambda invocation failures

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref Queue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt Queue.Arn
            Principal:
              AWS: "*"
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref Topic

  WriterQueueSubscription:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt Queue.Arn
      FunctionName: !Ref WriterFunction

  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-alarm-topic
      Subscription:
        - Endpoint: !Ref AlarmEmail
          Protocol: email

  ReaderErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/Lambda
      AlarmDescription: !Sub Errors for ${ReaderFunction} has hit threshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ReaderFunction
      MetricName: Errors
      ComparisonOperator: GreaterThanThreshold
      Statistic: Sum
      Unit: Count
      Threshold: 3
      Period: 1200 # 20 mins
      EvaluationPeriods: 2
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic

  QueueMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/SQS
      AlarmDescription: !Sub Visible messages in ${Queue} has hit threshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt [Queue, QueueName]
      MetricName: ApproximateNumberOfMessagesVisible
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Statistic: Sum
      Unit: Count
      Threshold: 5
      Period: 300
      EvaluationPeriods: 1
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic
